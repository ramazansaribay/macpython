def repeater(n):
    return lambda x : x * n
repeat_2 = repeater(2)
repeat_3 = repeater(3)
repeat_4 = repeater(4)

print(repeat_2("ali"))
print(repeat_3("ali"))
print(repeat_4("ali"))




def functioner(n):
    return lambda x : x + n

myPrint_smile = functioner(":)")

print(myPrint_smile("hello"))






def functioner(n):
    return lambda x : x + n

print(functioner(":)")("Hello Ramazan"))




def func_generator(function):
    return lambda x : function(x)

my_print = func_generator(print)                                            KENDİ FONKSİYONLARIN
my_max = func_generator(max)
my_bool = func_generator(bool)



def equal(a,b,c):
    numbers = [a,b,c]
    res = numbers.count(max(numbers, key=numbers.count))
    return res if res > 1 else 0

print(equal(2,4,4))


BU İKİSİ BİRBİRİNİN AYNI. BİRİ DEF İLE BİRİ LAMBDA İLE

equall = lambda x,y,z : [x,y,z].count(max([x,y,z], key=[x,y,z].count)) if [x,y,z].count(max([x,y,z], key=[x,y,z].count)) > 1 else 0

print(equall(1,2,2))



def test(x,y,z):
    print(x,y,z)

testDict = {"x" : 1, "y" : 2, "z" : 3}
testList = [10, 20, 30]

test(*testDict)
test(**testDict)

test(*testList)



-------------PYTHON MODULES----------------

import string
print(string.punctuation)
print(string.digits)

***********

import datetime
print(datetime.date.today())
print(datetime.datetime.now())

***********

from random import choice

city = ["Stockholm", "Istanbul", "Seul", "Cape Town"]
print(choice(city))

*************

from datetime import date
birth = date(571, 4, 22)
vefat = date(632, 6, 8)
print(date.toordinal(vefat) - date.toordinal(birth))

**************

LAMBDA EXAMPLES

say = [2, 4, 6, 9, 13, 15, 16]
cift = filter(lambda x : x%2== 0, say)
print(list(cift))

****************
READING TXT FILE 

f = open('raw.txt', 'r')
print(f.read())
f.close()

f = open('raw.txt', 'r')
print(f.read(33))               33 karakter okur
print(f.read(22))               33ün üstüne 22 karakter daha okur           
print(f.tell())                 cursorun nerede olduğunu söyler
f.seek(0)                       Cursoru başa alır.
f.close()

***********************
OPEN FILE

file = open("raw.txt", "r")
print(file.readline())
print(file.readline())
print(file.readline())
file.close()



with open("mars.txt", "r", encoding="utf-8") as f:
    liste = f.readlines()
counter = 0
with open("kita.txt", "w", encoding="utf-8") as f:
    for i in liste:
        counter += 1
        if counter %4 == 0:
            f.write(i + "\n")
        else:
            f.write(i)

with open("kita.txt", "r", encoding="utf-8") as f:
    print(f.read())




sozluk = {}

for i in cumle:
    keys = sozluk.keys()
        if i in keys:
            sozluk


toplacıkar = {"topla" : lambda x,y : x + y,
                "çıkar" : lambda x,y : x - y}

toplacıkar["topla"](9,3)


for x in [1,2,3,4,5]:
    print(x, ":", (lambda x : "even" if x % 2 == 0 else "odd")(x))

READING CSV FILES

with open("bi.csv", "r", encoding="utf-8") as file:
    print(file.read())


import csv
with open("bi.csv", "r", newline="", encoding="utf-8") as file:
    csv_rows = csv.reader(file)

    for row in csv_rows:
        print(row)

csv.reader(file, delimeter = ",")           BURADA NORMALDE , KULLANILIYOR. TAB VEYA . GİBİ ŞEYLER KULLANILABİLİR. O ZAMAN DELIMETERI DEĞİŞTİRMEK LAZIM.


\r carriage returndür. cursoru başa sarar. böyle bir durumda yazı yazıyorsa başa döndüğü için yeni yazdıklarını eskinin üstüne yazdırır.

delimeterı eğer karakter olarak satırda kullanılmayan bir karakter olarak kullanırsan her bir satırı tek bir string olarak alır. liste elemanı olarak almaz.


import pandas
x = pandas.read_csv("bi.csv")
x                                   GÖRSEL TABLO OLARAK VERİYOR



-----------------------------------
TRY EXCEPT CODE BLOCK

while True:
    no_one = int(input("The first number please : "))
    no_two = int(input("The second number please : "))
    try:
        division = no_one / no_two
        print("The result of the division is : ", division)
        break
    except: 
        print("Oops. Something went wrong. Please try again.")



try:                çalışırsa try
    print()
except:             try çalışmazsa
    print()
else:               try çalışıp, exception çalışmazsa
    print()
finally:            hangisi çalışırsa çalışsın finally çalışır.
    print()

try:
    print("x" + "3")
except ValueError:
    print("Yanlış değer")
else:
    print("Demekki exception çalışmamış")
finally:
    print("Nihayet ben çalıştım.")


try something. if it can't use except


try:
    isim = input("isminiz: ")
    a
except Exception as e:
    with open("hata.txt", "a", encoding="utf-8") as f:
        f.write(isim + f",{e}" + "\n")


except ValueError:
    print("It is a ValueError. Check your input")
except TypeError:
    print("It is a TypeError. Check your input")
except:
    print("Unknown error. Please try again.")

Hiyerarşik errorlar var. Onları yazarsan altındaki errorları da kapsıyor.
Örneğin ArithmeticError.


ram = [1,2,3,4]
ram.copy()
ram.extend(anotherlist)
ram.extend(another_tuple ya da another_küme)
ram.pop[2] değeri listeden atar.


RECURSION RECURSIVE
def facto(n):
    if n==1:
        return
    else:
        return n * (facto(n-1)







----------------------------

OOP OBJECT ORIENTED PROGRAMMING

Method and Property

* Encapsulation         containing information in an object                                 
* Inheritance           child classes inherit data and behaviours from parent class         KALITIMSAL OLARAK CLASSLARDAN GELENLER
* Abstraction           only exposing high level public methods                             SOYUT DÜŞÜNME HIGH LEVEL OLARAK İLK DÜŞÜNÜLEN. DETAYLAR SONRA.                           
* Polymorphism          many methods can do the same task                                   BİR ÖZELLİKLE FARKLI ŞEYLER ORTAYA ÇIKARABİLME(DRAW GİBİ)


Domain 
Galatarasay     Futbol, Basketball, Spor Kulubü, 



Class = Araba
Object = Polo 

Class = House
Object = My Home


Class:
    Car:
        Properties
        Methods

Object:
    Ford:
        Properties
        Methods

OOP
To put it concisely, you should remember the following:
an object-oriented program consists of a set of interacting objects;
as a rule, the internal state of an object is hidden;
an object may have characteristics: fields and methods;
an object is an instance of a class (type);
a class is a more abstract concept than an individual object; it may be considered a template or blueprint that describes the common structure of a set of similar objects. 


CLASS

class Employee:

    def __init__(self, first, last, pay):
        self.first = first
        self.last = last
        self.pay = pay
        self.all = first + last + ":" + first.lower() + "." + last.lower() + "@company.com"


emp_1 = Employee("Ramazan", "SARIBAY", 50000)
emp_2 = Employee("Asli", "SARIBAY", 60000)

print(emp_1.all)
print(emp_2.all)









