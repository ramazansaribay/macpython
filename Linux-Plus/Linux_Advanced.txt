ENVIRONMENT VARIABLES
Environment variables are being kept in .bash_profile and can be edit with an editor.

printenv ENV
printenv HOME

echo $ENV
echo $HOME

You can create new variable or change the variables.
export ENV="value"          change the variable
export TZ="US/Pacific"

VARIABLE=ramocan123         create new variable

unset ENV
unset TZ

When you type a command, the shell looks for it in the directories specified by your path.
To check the path of a command you write
which command
which echo
It gives you the directories that the command can be called from.

You can also append a path to any command or file
export PATH=$PATH:/games/awesome 


sudo yum install git
sudo apt install git

sudo yum remove git
sudo yum autoremove git

sudo yum info git
sudo apt info git

sudo apt remove git
sudo apt autoremove git

sudo yum list installed


sudo yum --showduplicates list git


cat 
tac 
tee 

cat ramo.txt | tee ramo2.txt        pipeline. tee commands takes the first command's result and save it to a new file you named it.

cut -d' ' -f1                       -d is delimeter. write something inside ''. -f is the field. Enter the number of the field you want to show.


tr abc dfg                          will change abc to dfg
tr -d abc                           will delete abc 
td [a-z] [A-Z]                      will change lower case to upper case

wc file                             will check for lines, characters


sort file                           will sort the file
sort -r file                        will sort the file reverse 
sort file | uniq 

cat > countries.csv 
Country, Capital, Continent
USA, Washington, North America
France, Paris, Europe
Canada, Ottawa, North America

cut -d',' -f3 countries.csv | tail -4 | sort | uniq | tee continents.txt

cat continents.txt


;                                   with semicolon, you can combine different commands in one line one by one consecutively. will wait for the previous commands to be completed.
&                                   will use the commands without waiting for other command to be completed.
$?                                  will check for the command to be completed or not. If completed result will be 0, if not it will be different from 0.
&& double ampersand                 if the first command works, the second will work.
|| double vertical bar              if the first command works, second will not. if the first command does not work, the second will.
#                                   comment 
\                                   escape character. can bu used as a new line.


---SCRIPTING---

create a file.sh
to make this file executable; 
chmod +x file.sh
linuxconfig.org:$ ./hello-world.sh

#!/bin/bash
echo "Hello World"
#declare a string variable 
STRING="Hello World"
echo $STRING


#! /bin/bash
clear
echo "Enter your age"
read  st1
echo "Your age: " $st1



NAME="John"
echo "Hi $NAME"  #=> Hi John
echo 'Hi $NAME'  #=> Hi $NAME

echo {A,B}.js
{A,B}   Same as A B
{A,B}.js    Same as A.js B.js
{1..5}  Same as 1 2 3 4 5


$ echo {I,want,my,money,back}
I want my money back

$ echo _{I,want,my,money,back}
_I _want _my _money _back

$ echo {I,want,my,money,back}_
I_ want_ my_ money_ back_

$ echo _{I,want,my,money,back}-
_I- _want- _my- _money- _back-


# Single line comment  
: '
This is a  
multi-line  
comment
'


Command	Operation
-lt	    <
-gt	    >
-le	    <=
-ge	    >=
-eq	    ==
-ne	    !=

#!/bin/bash
for i in $( ls ); do
   echo item: $i
done

for service in S3 EC2 Lambda Glacier CloudFront Kinesis
do
  echo "Amazon Service: $service"
done

#!/bin/bash 
     COUNTER=0
     while [  $COUNTER -lt 10 ]; do
         echo The counter is $COUNTER
         let COUNTER=COUNTER+1 
     done

      Until sample
     #!/bin/bash 
     COUNTER=20
     until [  $COUNTER -lt 10 ]; do
         echo COUNTER $COUNTER
         let COUNTER-=1
     done



#!/bin/bash

function quit {
   exit
}

function hello {
   echo Hello!
}

 hello
 quit

 echo foo 


case EXPRESSION in

  PATTERN_1)
    STATEMENTS
    ;;

  PATTERN_2)
    STATEMENTS
    ;;

  PATTERN_N)
    STATEMENTS
    ;;

  *)
    STATEMENTS
    ;;
esac
 



#!/bin/bash
inputs(){
     read -p "Enter first integer: " int1
    read -p "Enter second integer: " int2
}

exitPrompt(){
    read -p "Do you wish to continue? [y]es or [n]o: " ans
    if (( $ans == "n"))
    then
        echo "Exiting the script. Have a nice day!"
        sleep 2
        exit
    else
        continue
    fi
}


while(true)
    do
    clear
    printf "Choose from the following operations: \n"
    printf "[a]Addition\n[b]Subtraction\n[c]Multiplication\n[d]Division\n"
    printf "################################\n"
    read -p "Your choice: " choice

    case $choice in
    [aA])
        inputs
        res=$((int1+int2))
    ;;

    [bB])
        inputs
        res=$((int1-int2))
    ;;

    [cC])
        inputs
        res=$((int1*int2))
    ;;

    [dD])
        inputs
        res=$((int1/int2))
    ;;

    *)
        res=0
        echo "wrong choice!"
    esac

    echo "The result is: " $res
    exitPrompt
done






