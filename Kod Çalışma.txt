----------------------
STRING FORMATTING

string.format()

var1 = "bla bla" 
var2 = "bla bla"
var3 = "Hello, {}, {}".format(var1, var2)
var3 = "Hello, {0}, {1}".format(var1, var2)         POSITIONAL ARGUMENTS 
var3 = "Hello, {var2} {var1}".format(var1="bla bla, var2="bla bla")

ykn = "ykn1"
northing = "4758965.020458"
easting = "325486.025486"
print("The Northing of {} is N {} and easting is E {}".format(ykn, northing, easting))

These are Positional Arguments and Keyword Arguments.

f-string Method is;
var1 = "bla bla" 
var2 = "bla bla"
var3 = f"string {var1} {var2}"

x = 10_000_000_000
y = 100_000_000
adding = x + y
print(f"{adding: ,}") 
10,100,000,000          sonuç. formatlıyoruz. _ yerine , kullanıyor


Example;
ykn = "ykn1"
northing = "4758965.020458"
easting = "325486.025486"
print(f"The Northing of {ykn} is N {northing} and easting is E {easting}"


--------------------------

MATH OPERATIONS

+ ADDITION
- SUBTRACTION
* MULTIPLICATION
/ DIVISION
** EXPONENT

--------------------------
TYPE CONVERSION
int()
str()
float()


-------------------------
DATES

from datetime import datetime
datetime.now is the function to get the current date time


TIMEDELTA
from datetime import datetime, timedelta
today = datetime.now()
oneday= timedelta(days=1)
timedelta(weeks=1)
yesterday = today - oneday
print("Yesterday was: " + str(yesterday))

DATETIME.NOW 
from datetime import datetime
currnet_date = datetime.now()

print("Day : + str(current_date.day))
print("Month: + str(current_date.month))
print("Year: + str(current_date.year))

STRPTIME 
datetime.strptime(var1, "%d/%m/%Y)
from datetime import datetime
x = "HCTM2020Y06M26D11H16M17S---"
date = datetime.strptime(x, "HCTM%YY%mM%dD%HH%MM%SS")
print("Time is:  " + str(date))                             RAW DATALARDA KULLANIM



STATEMENTS

if bla bla:
    print(bla bla)


if bla bla:
    functionblabla
else:
    functionblabla


if bla bla:
    functionblabla
elif bla bla:
    functionblabla
else:
    fucntionblabla


COLLECTION TYPE
LISTS

empty_list = []
empty_list.append(any value)
len()
empty_list.insert(0, "ramazan")         specify where do you want it to go
empty_list.sort()                       alphabetical order or smallest to biggest

[1, 2, 3, 4] + ["11", "22", 33]
[1, 2, 3, 4, '11', '22', 33]

DICTIONARY : KEY VALUE PAIRS

person = {"first": "Ramazan}
person["last"] = "SARIBAY"
print(person)
print(person["fisrt])

COLLECTION TYPE
SET 
set = {"str", 1, 1.05}
set = set("str", 1, 1.05)



LOOPS

for i in val:
    functionblabla

for name in ["Ramazan", "Asli"]:
    print(name)

people["ramazan", "asli"]
for name in people:
    print(name)

index = 0
while index <= len(people):
    print(people[index])
    index += 1



FUNCTIONS

def function_name():
    code
    return

(lambda parameters : expression)(arguments)

lambda x : code

(lambda x: x**2)(2)  # squares '2'

print((lambda x: x**2)(2))

print((lambda x, y: (x+y)/2)(3, 5))  # takes two int, returns mean of them

average = (lambda x, y: (x+y)/2)(3, 5) 
print(average)

average = lambda x, y: (x+y)/2
print(average(3, 5))  # we call


- Def can hold multiple expressions while lambda is a uni-expression function.
- Def generates a function and designates a name to call it later. Lambda forms a function        object and returns it.
- Def can have a return statement. Lambda can’t have return statements. 
- Lambda supports to get used inside a list and dictionary.


no need for return in lambda

lambda x: "odd" if x%2!=0 else "even"
lambda is an anonymous function. it is one time used function without a name.


MAP FUNCTION 

map(function, iterable)
map(lambda x: x**2, iterable)

letter1 = ['o', 's', 't', 't']
letter2 = ['n', 'i', 'e', 'w']
letter3 = ['e', 'x', 'n', 'o']
numbers = list(map(lambda x,y,z : x+y+z, letter1,letter2,letter3))

map() returns a list of the outputs after applying the given 
function to each element of a given iterable object such as 
list, tuple, etc 
map type is map. you may need to convert it to list or tuple

FILTER FUNCTION 

filter(function, sequence)

first_ten = [0,1,2,3,4,5,6,7,8,9]
even = list(filter(lambda x: x%2==0, first_ten))
print(even)



vowel_list = ['a', 'e', 'i', 'o', 'u']
first_ten = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
  
vowels = filter(lambda x: True if x in vowel_list else False, first_ten) 

print('Vowels are :', list(vowels))


def modular_function(n):
    return lambda x: x ** n

def modular_function(n):
    return lambda x: x ** n
    
power_of_2 = modular_function(2)  # first sub-function derived from def
power_of_3 = modular_function(3)  # second sub-function derived from def
power_of_4 = modular_function(4)  # third sub-function derived from def

print(power_of_2(2))  # 2 to the power of 2
print(power_of_3(2))  # 2 to the power of 3
print(power_of_4(2))  # 2 to the power of 4



filter() filters the given sequence (iterable objects) with the 
help of a function (lambda) that tests each element 
in the sequence to be true or not.

Note that filter() filters each element in the iterable object, 
depending on whether the function's result is True or False.

filter type is filter. you may need to convert it to list or tuple

SORTED FUNCTION

sorted(iterable, key=key, reverse=reverse)

city = ["istanbul", "rome", "los angeles", "addis abbaba"]
m = sorted(city, reverse = True, key = len)
print(m)

LIST.COUNT AND MAX

list.count(value)
max(iterable, key = function)

numbers = [1, 3, 7, 4, 3, 0, 3, 6, 3, 9, 16]
m = max(numbers, key = numbers.count)
n = (numbers.count(m))
print(f"The number {m} is repeated {n} times")

LIST.INDEX 
list.index(elmnt)
samanlık = ["saman", "igne", "tavuk", "inex", "su"]
o = samanlık.index("igne")
o


DEFINITIONS
elmnt	Required. Any type (string, number, list, etc.). The element to search for

MULTIPLE ASSIGN  = COKLU DEGER ATAMA

v = ("five", 5, True)
x, y, z = v
print(v)

('five', 5, True)

(monday, tuesday, wednesday, thursday, friday, saturday, sunday) = tuple(range(1,8))



TUPLES

tuple'ın içi değiştirilemiyor fakat içinde liste varsa müdahele edilebiliyor.
tt = (1, 2, 3, [4, 5, 6])           3. üyesi liste.
tt[3].append("1")                   listenin içine girip str 1 ekliyor
(1, 2, 3, [4, 5, 6, '1'])           sonuç

a, _, b, _ = (10, 20, 30, 40)       _ kullanınca pos argument olarak gelen şeyi boş alıyor
print(a,b)                          a = 10 b= 30 olarak çıkıyor
10 30

x, y, *z = (11, 22, 33, 44, 55, 66, 77, 88)
print(x)
print(y)
print(z)    [33, 44, 55, 66, 77, 88] sonuç


x ve y'ye ilk ikisini atıyor. gerisini * sayesinde z'ye liste olarak atıyor.

x, y, *z, t = (11, 22, 33, 44, 55, 66, 77, 88)
print(x)    11
print(y)    22
print(z)    [33, 44, 55, 66, 77]
print(t)    88                      sonuncu değeri yine sondakine atıyor.